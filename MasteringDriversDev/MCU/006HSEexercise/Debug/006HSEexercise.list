
006HSEexercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000019c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000394  0800039c  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000394  08000394  0001039c  2**0
                  CONTENTS
  4 .ARM          00000000  08000394  08000394  0001039c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000394  0800039c  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000398  08000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800039c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800039c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001039c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000010e  00000000  00000000  000103ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000080  00000000  00000000  000104d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  000105a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f32  00000000  00000000  000105d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000416  00000000  00000000  00011502  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003c0e  00000000  00000000  00011918  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00015526  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  000155a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	0800037c 	.word	0x0800037c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	0800037c 	.word	0x0800037c

08000238 <main>:
#define GPIOA_BASE_ADDR            0x40020000UL

#define RCC_CR_HSEON_RDY_MASK      0x01<<17

int main(void)
{
 8000238:	b480      	push	{r7}
 800023a:	b087      	sub	sp, #28
 800023c:	af00      	add	r7, sp, #0




    uint32_t *pRccCrReg = (uint32_t*) RCC_CR_REG_ADDR;
 800023e:	4b23      	ldr	r3, [pc, #140]	; (80002cc <main+0x94>)
 8000240:	617b      	str	r3, [r7, #20]
    //1-Enable HSE Bypass
    *pRccCrReg |= 0x01 << 18; //Set 18 bit position
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	601a      	str	r2, [r3, #0]
    // 2. Configure HSE ON to start HSE
    *pRccCrReg |= 0x01 << 16; //Set 16 bit position
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000256:	697b      	ldr	r3, [r7, #20]
 8000258:	601a      	str	r2, [r3, #0]

    uint32_t *pRccCfgrReg =  (uint32_t*) RCC_CFGR_REG_ADDR;
 800025a:	4b1d      	ldr	r3, [pc, #116]	; (80002d0 <main+0x98>)
 800025c:	613b      	str	r3, [r7, #16]

    //3. Switch system clock to HSE

    *pRccCfgrReg |= 0x01 << 0;
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f043 0201 	orr.w	r2, r3, #1
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	601a      	str	r2, [r3, #0]


	//4. Configure the RCC_CFGR MCO1 bit fields to select HSE as clock source
	*pRccCfgrReg &= ~(0x3 << 21); //clear 21 and 22 bit positions
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	601a      	str	r2, [r3, #0]
	*pRccCfgrReg |= 0x01 << 22; //Set 22 bit position
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800027e:	693b      	ldr	r3, [r7, #16]
 8000280:	601a      	str	r2, [r3, #0]


	//Configure MCO1 pre-scaler
	//*pRccCfgrReg |= ( 1 << 25);
	*pRccCfgrReg |= ( 1 << 26);
 8000282:	693b      	ldr	r3, [r7, #16]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	601a      	str	r2, [r3, #0]
 * which will be covered in later sections of this course.
 */

	//a ) Enable the peripheral clock for GPIOA peripheral

	 uint32_t *pRCCAhb1Enr = (uint32_t*)(RCC_BASE_ADDR + 0x30);
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <main+0x9c>)
 8000290:	60fb      	str	r3, [r7, #12]
	*pRCCAhb1Enr |= ( 1 << 0); //Enable GPIOA peripheral clock
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f043 0201 	orr.w	r2, r3, #1
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]

	//b ) Configure the mode of GPIOA pin 8 as alternate function mode

	uint32_t *pGPIOAModeReg = (uint32_t*)(GPIOA_BASE_ADDR + 00);
 800029e:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <main+0xa0>)
 80002a0:	60bb      	str	r3, [r7, #8]
	*pGPIOAModeReg &= ~( 0x3 << 16); //clear
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	601a      	str	r2, [r3, #0]
	*pGPIOAModeReg |= ( 0x2 << 16);  //set
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	601a      	str	r2, [r3, #0]

	//c ) Configure the alternation function register to set the mode 0 for PA8

	uint32_t *pGPIOAAltFunHighReg = (uint32_t*)(GPIOA_BASE_ADDR + 0x24);
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <main+0xa4>)
 80002bc:	607b      	str	r3, [r7, #4]
	*pGPIOAAltFunHighReg &= ~( 0xf << 0);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f023 020f 	bic.w	r2, r3, #15
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	601a      	str	r2, [r3, #0]

	for(;;);
 80002ca:	e7fe      	b.n	80002ca <main+0x92>
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40023808 	.word	0x40023808
 80002d4:	40023830 	.word	0x40023830
 80002d8:	40020000 	.word	0x40020000
 80002dc:	40020024 	.word	0x40020024

080002e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e4:	480d      	ldr	r0, [pc, #52]	; (800031c <LoopForever+0x6>)
  ldr r1, =_edata
 80002e6:	490e      	ldr	r1, [pc, #56]	; (8000320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e8:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <LoopForever+0xe>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ec:	e002      	b.n	80002f4 <LoopCopyDataInit>

080002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f2:	3304      	adds	r3, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f8:	d3f9      	bcc.n	80002ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fa:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002fc:	4c0b      	ldr	r4, [pc, #44]	; (800032c <LoopForever+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000300:	e001      	b.n	8000306 <LoopFillZerobss>

08000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000304:	3204      	adds	r2, #4

08000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000308:	d3fb      	bcc.n	8000302 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800030a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800030e:	f000 f811 	bl	8000334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000312:	f7ff ff91 	bl	8000238 <main>

08000316 <LoopForever>:

LoopForever:
    b LoopForever
 8000316:	e7fe      	b.n	8000316 <LoopForever>
  ldr   r0, =_estack
 8000318:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800031c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000320:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000324:	0800039c 	.word	0x0800039c
  ldr r2, =_sbss
 8000328:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800032c:	2000001c 	.word	0x2000001c

08000330 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC_IRQHandler>
	...

08000334 <__libc_init_array>:
 8000334:	b570      	push	{r4, r5, r6, lr}
 8000336:	4e0d      	ldr	r6, [pc, #52]	; (800036c <__libc_init_array+0x38>)
 8000338:	4c0d      	ldr	r4, [pc, #52]	; (8000370 <__libc_init_array+0x3c>)
 800033a:	1ba4      	subs	r4, r4, r6
 800033c:	10a4      	asrs	r4, r4, #2
 800033e:	2500      	movs	r5, #0
 8000340:	42a5      	cmp	r5, r4
 8000342:	d109      	bne.n	8000358 <__libc_init_array+0x24>
 8000344:	4e0b      	ldr	r6, [pc, #44]	; (8000374 <__libc_init_array+0x40>)
 8000346:	4c0c      	ldr	r4, [pc, #48]	; (8000378 <__libc_init_array+0x44>)
 8000348:	f000 f818 	bl	800037c <_init>
 800034c:	1ba4      	subs	r4, r4, r6
 800034e:	10a4      	asrs	r4, r4, #2
 8000350:	2500      	movs	r5, #0
 8000352:	42a5      	cmp	r5, r4
 8000354:	d105      	bne.n	8000362 <__libc_init_array+0x2e>
 8000356:	bd70      	pop	{r4, r5, r6, pc}
 8000358:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800035c:	4798      	blx	r3
 800035e:	3501      	adds	r5, #1
 8000360:	e7ee      	b.n	8000340 <__libc_init_array+0xc>
 8000362:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000366:	4798      	blx	r3
 8000368:	3501      	adds	r5, #1
 800036a:	e7f2      	b.n	8000352 <__libc_init_array+0x1e>
 800036c:	08000394 	.word	0x08000394
 8000370:	08000394 	.word	0x08000394
 8000374:	08000394 	.word	0x08000394
 8000378:	08000398 	.word	0x08000398

0800037c <_init>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr

08000388 <_fini>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	bf00      	nop
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr
