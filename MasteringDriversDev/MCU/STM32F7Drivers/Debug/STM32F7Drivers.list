
STM32F7Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a74  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000c6c  08000c6c  00010c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c78  08000c78  00010c80  2**0
                  CONTENTS
  4 .ARM          00000000  08000c78  08000c78  00010c80  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c78  08000c80  00010c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c78  08000c78  00010c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c7c  08000c7c  00010c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000c80  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000c80  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010c80  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b40  00000000  00000000  00010cae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000519  00000000  00000000  000127ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000178  00000000  00000000  00012d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000140  00000000  00000000  00012e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002725  00000000  00000000  00012fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000012be  00000000  00000000  000156e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000bbfc  00000000  00000000  000169a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002259f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000558  00000000  00000000  0002261c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	08000c54 	.word	0x08000c54

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000c54 	.word	0x08000c54

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <SPI2_GPIOInits>:
 * PB14 ---> SPI2-MISO
 * PB13 ---> SPI2-SCK
 * PB12 ---> SPI2-NSS
 */
void SPI2_GPIOInits()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx  = GPIOB;
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <SPI2_GPIOInits+0x40>)
 8000250:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.PinMode = GPIO_ALT ;
 8000252:	2302      	movs	r3, #2
 8000254:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.PinAltFunMode = 5;
 8000256:	2305      	movs	r3, #5
 8000258:	737b      	strb	r3, [r7, #13]

	SPIPins.GPIO_PinConfig.PinSpeed = GPIO_SPEED_VERY_HIGH;
 800025a:	2303      	movs	r3, #3
 800025c:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinConfig.PinOPType = GPIO_PUSH_PULL;
 800025e:	2300      	movs	r3, #0
 8000260:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.PinPupDr = GPIO_PUPDR_PULLUP;
 8000262:	2301      	movs	r3, #1
 8000264:	72fb      	strb	r3, [r7, #11]

	//Sclk
	SPIPins.GPIO_PinConfig.PinNum = GPIO_PIN13; //SPI2
 8000266:	230d      	movs	r3, #13
 8000268:	723b      	strb	r3, [r7, #8]
	//SPIPins.GPIO_PinConfig.PinNum = GPIO_PIN3; // SPI3
	GPIO_Init(&SPIPins);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f991 	bl	8000594 <GPIO_Init>
	//MosI
	SPIPins.GPIO_PinConfig.PinNum = GPIO_PIN15; //SPI2
 8000272:	230f      	movs	r3, #15
 8000274:	723b      	strb	r3, [r7, #8]
	//SPIPins.GPIO_PinConfig.PinNum = GPIO_PIN5; // SPI3
    GPIO_Init(&SPIPins);
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f98b 	bl	8000594 <GPIO_Init>
    GPIO_Init(&SPIPins);*/




}
 800027e:	bf00      	nop
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40020400 	.word	0x40020400

0800028c <SPI2_Inits>:
void SPI2_Inits()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;
	SPI2Handle.Spix = SPI2;
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <SPI2_Inits+0x38>)
 8000294:	603b      	str	r3, [r7, #0]
	SPI2Handle.SPIConfig.SPI_Bus_Config = SPI_BUS_CONFIG_FULLDUP;
 8000296:	2301      	movs	r3, #1
 8000298:	717b      	strb	r3, [r7, #5]
	SPI2Handle.SPIConfig.SPI_Device_Mode = SPI_DEVICE_MODE_MASTER ;
 800029a:	2301      	movs	r3, #1
 800029c:	713b      	strb	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_ClckSpeed = SPI_SCLK_SPEED_DIV2 ;
 800029e:	2300      	movs	r3, #0
 80002a0:	71bb      	strb	r3, [r7, #6]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002a2:	2300      	movs	r3, #0
 80002a4:	71fb      	strb	r3, [r7, #7]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002a6:	2300      	movs	r3, #0
 80002a8:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002aa:	2300      	movs	r3, #0
 80002ac:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN;
 80002ae:	2301      	movs	r3, #1
 80002b0:	72bb      	strb	r3, [r7, #10]
	SPI_Init(&SPI2Handle);
 80002b2:	463b      	mov	r3, r7
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fbd9 	bl	8000a6c <SPI_Init>
}
 80002ba:	bf00      	nop
 80002bc:	3720      	adds	r7, #32
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40003800 	.word	0x40003800

080002c8 <main>:

int main()
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
	 char user_data[] = "Hello World";
 80002ce:	4a0e      	ldr	r2, [pc, #56]	; (8000308 <main+0x40>)
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//This function is used to initialise GPIO pins for SPI2
	SPI2_GPIOInits();
 80002d8:	f7ff ffb6 	bl	8000248 <SPI2_GPIOInits>
	//This function is used to initialise SPI peripheral parameters
	SPI2_Inits();
 80002dc:	f7ff ffd6 	bl	800028c <SPI2_Inits>
	//enable SPI2 peripheral
	SPIPeripheralControl(SPI2, ENABLE);
 80002e0:	2101      	movs	r1, #1
 80002e2:	480a      	ldr	r0, [pc, #40]	; (800030c <main+0x44>)
 80002e4:	f000 fc75 	bl	8000bd2 <SPIPeripheralControl>
	SPITransmit(SPI2,(uint8_t*)user_data,strlen(user_data));
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ffa4 	bl	8000238 <strlen>
 80002f0:	4602      	mov	r2, r0
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4619      	mov	r1, r3
 80002f6:	4805      	ldr	r0, [pc, #20]	; (800030c <main+0x44>)
 80002f8:	f000 fc47 	bl	8000b8a <SPITransmit>
	//disable SPI2 peripheral
	SPIPeripheralControl(SPI2, DISABLE);
 80002fc:	2100      	movs	r1, #0
 80002fe:	4803      	ldr	r0, [pc, #12]	; (800030c <main+0x44>)
 8000300:	f000 fc67 	bl	8000bd2 <SPIPeripheralControl>
	while(1)
 8000304:	e7fe      	b.n	8000304 <main+0x3c>
 8000306:	bf00      	nop
 8000308:	08000c6c 	.word	0x08000c6c
 800030c:	40003800 	.word	0x40003800

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	; (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 8000316:	490e      	ldr	r1, [pc, #56]	; (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000318:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 800032c:	4c0b      	ldr	r4, [pc, #44]	; (800035c <LoopForever+0x16>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800033a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 fc65 	bl	8000c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ffc1 	bl	80002c8 <main>

08000346 <LoopForever>:

LoopForever:
    b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000354:	08000c80 	.word	0x08000c80
  ldr r2, =_sbss
 8000358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800035c:	2000001c 	.word	0x2000001c

08000360 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <PeriphClckControl>:

#include "stm32F7xx_gpio.h"

//Clock configuration
void PeriphClckControl(GPIO_REG_DEF_t *pGPIOx , uint8_t Activation)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]

	if(Activation == ENABLE)
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d178      	bne.n	8000468 <PeriphClckControl+0x104>
	{

		if(pGPIOx == GPIOA)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a7a      	ldr	r2, [pc, #488]	; (8000564 <PeriphClckControl+0x200>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <PeriphClckControl+0x28>
		{
			GPIOA_PERIPH_CLCK_EN();
 800037e:	4b7a      	ldr	r3, [pc, #488]	; (8000568 <PeriphClckControl+0x204>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a79      	ldr	r2, [pc, #484]	; (8000568 <PeriphClckControl+0x204>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6313      	str	r3, [r2, #48]	; 0x30

		}


	}
}
 800038a:	e0e5      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOB)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a77      	ldr	r2, [pc, #476]	; (800056c <PeriphClckControl+0x208>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <PeriphClckControl+0x3e>
			GPIOB_PERIPH_CLCK_EN();
 8000394:	4b74      	ldr	r3, [pc, #464]	; (8000568 <PeriphClckControl+0x204>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000398:	4a73      	ldr	r2, [pc, #460]	; (8000568 <PeriphClckControl+0x204>)
 800039a:	f043 0302 	orr.w	r3, r3, #2
 800039e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a0:	e0da      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOC)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a72      	ldr	r2, [pc, #456]	; (8000570 <PeriphClckControl+0x20c>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <PeriphClckControl+0x54>
			GPIOC_PERIPH_CLCK_EN();
 80003aa:	4b6f      	ldr	r3, [pc, #444]	; (8000568 <PeriphClckControl+0x204>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	4a6e      	ldr	r2, [pc, #440]	; (8000568 <PeriphClckControl+0x204>)
 80003b0:	f043 0304 	orr.w	r3, r3, #4
 80003b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b6:	e0cf      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOD)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a6e      	ldr	r2, [pc, #440]	; (8000574 <PeriphClckControl+0x210>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <PeriphClckControl+0x6a>
			GPIOD_PERIPH_CLCK_EN();
 80003c0:	4b69      	ldr	r3, [pc, #420]	; (8000568 <PeriphClckControl+0x204>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	4a68      	ldr	r2, [pc, #416]	; (8000568 <PeriphClckControl+0x204>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003cc:	e0c4      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOE)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a69      	ldr	r2, [pc, #420]	; (8000578 <PeriphClckControl+0x214>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <PeriphClckControl+0x80>
			GPIOE_PERIPH_CLCK_EN();
 80003d6:	4b64      	ldr	r3, [pc, #400]	; (8000568 <PeriphClckControl+0x204>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a63      	ldr	r2, [pc, #396]	; (8000568 <PeriphClckControl+0x204>)
 80003dc:	f043 0310 	orr.w	r3, r3, #16
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e2:	e0b9      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOF)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a65      	ldr	r2, [pc, #404]	; (800057c <PeriphClckControl+0x218>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <PeriphClckControl+0x96>
			GPIOF_PERIPH_CLCK_EN();
 80003ec:	4b5e      	ldr	r3, [pc, #376]	; (8000568 <PeriphClckControl+0x204>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4a5d      	ldr	r2, [pc, #372]	; (8000568 <PeriphClckControl+0x204>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f8:	e0ae      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOG)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a60      	ldr	r2, [pc, #384]	; (8000580 <PeriphClckControl+0x21c>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <PeriphClckControl+0xac>
			GPIOG_PERIPH_CLCK_EN();
 8000402:	4b59      	ldr	r3, [pc, #356]	; (8000568 <PeriphClckControl+0x204>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000406:	4a58      	ldr	r2, [pc, #352]	; (8000568 <PeriphClckControl+0x204>)
 8000408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800040c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040e:	e0a3      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOH)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a5c      	ldr	r2, [pc, #368]	; (8000584 <PeriphClckControl+0x220>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d106      	bne.n	8000426 <PeriphClckControl+0xc2>
			GPIOH_PERIPH_CLCK_EN();
 8000418:	4b53      	ldr	r3, [pc, #332]	; (8000568 <PeriphClckControl+0x204>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041c:	4a52      	ldr	r2, [pc, #328]	; (8000568 <PeriphClckControl+0x204>)
 800041e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000422:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000424:	e098      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOI)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a57      	ldr	r2, [pc, #348]	; (8000588 <PeriphClckControl+0x224>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d106      	bne.n	800043c <PeriphClckControl+0xd8>
			GPIOI_PERIPH_CLCK_EN();
 800042e:	4b4e      	ldr	r3, [pc, #312]	; (8000568 <PeriphClckControl+0x204>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000432:	4a4d      	ldr	r2, [pc, #308]	; (8000568 <PeriphClckControl+0x204>)
 8000434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000438:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043a:	e08d      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOJ)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a53      	ldr	r2, [pc, #332]	; (800058c <PeriphClckControl+0x228>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d106      	bne.n	8000452 <PeriphClckControl+0xee>
			GPIOJ_PERIPH_CLCK_EN();
 8000444:	4b48      	ldr	r3, [pc, #288]	; (8000568 <PeriphClckControl+0x204>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000448:	4a47      	ldr	r2, [pc, #284]	; (8000568 <PeriphClckControl+0x204>)
 800044a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800044e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000450:	e082      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOK)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a4e      	ldr	r2, [pc, #312]	; (8000590 <PeriphClckControl+0x22c>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d17e      	bne.n	8000558 <PeriphClckControl+0x1f4>
			GPIOK_PERIPH_CLCK_EN();
 800045a:	4b43      	ldr	r3, [pc, #268]	; (8000568 <PeriphClckControl+0x204>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045e:	4a42      	ldr	r2, [pc, #264]	; (8000568 <PeriphClckControl+0x204>)
 8000460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000464:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000466:	e077      	b.n	8000558 <PeriphClckControl+0x1f4>
		if(pGPIOx == GPIOA)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a3e      	ldr	r2, [pc, #248]	; (8000564 <PeriphClckControl+0x200>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <PeriphClckControl+0x11a>
			GPIOA_PERIPH_CLCK_DIS();
 8000470:	4b3d      	ldr	r3, [pc, #244]	; (8000568 <PeriphClckControl+0x204>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000474:	4a3c      	ldr	r2, [pc, #240]	; (8000568 <PeriphClckControl+0x204>)
 8000476:	f023 0301 	bic.w	r3, r3, #1
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047c:	e06c      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOB)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a3a      	ldr	r2, [pc, #232]	; (800056c <PeriphClckControl+0x208>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d106      	bne.n	8000494 <PeriphClckControl+0x130>
			GPIOB_PERIPH_CLCK_DIS();
 8000486:	4b38      	ldr	r3, [pc, #224]	; (8000568 <PeriphClckControl+0x204>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048a:	4a37      	ldr	r2, [pc, #220]	; (8000568 <PeriphClckControl+0x204>)
 800048c:	f023 0302 	bic.w	r3, r3, #2
 8000490:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000492:	e061      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOC)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a36      	ldr	r2, [pc, #216]	; (8000570 <PeriphClckControl+0x20c>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d106      	bne.n	80004aa <PeriphClckControl+0x146>
			GPIOC_PERIPH_CLCK_DIS();
 800049c:	4b32      	ldr	r3, [pc, #200]	; (8000568 <PeriphClckControl+0x204>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a0:	4a31      	ldr	r2, [pc, #196]	; (8000568 <PeriphClckControl+0x204>)
 80004a2:	f023 0304 	bic.w	r3, r3, #4
 80004a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a8:	e056      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOD)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a31      	ldr	r2, [pc, #196]	; (8000574 <PeriphClckControl+0x210>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d106      	bne.n	80004c0 <PeriphClckControl+0x15c>
			GPIOD_PERIPH_CLCK_DIS();
 80004b2:	4b2d      	ldr	r3, [pc, #180]	; (8000568 <PeriphClckControl+0x204>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	4a2c      	ldr	r2, [pc, #176]	; (8000568 <PeriphClckControl+0x204>)
 80004b8:	f023 0308 	bic.w	r3, r3, #8
 80004bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004be:	e04b      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOE)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a2d      	ldr	r2, [pc, #180]	; (8000578 <PeriphClckControl+0x214>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d106      	bne.n	80004d6 <PeriphClckControl+0x172>
			GPIOE_PERIPH_CLCK_DIS();
 80004c8:	4b27      	ldr	r3, [pc, #156]	; (8000568 <PeriphClckControl+0x204>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	4a26      	ldr	r2, [pc, #152]	; (8000568 <PeriphClckControl+0x204>)
 80004ce:	f023 0310 	bic.w	r3, r3, #16
 80004d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d4:	e040      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOF)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a28      	ldr	r2, [pc, #160]	; (800057c <PeriphClckControl+0x218>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d106      	bne.n	80004ec <PeriphClckControl+0x188>
			GPIOF_PERIPH_CLCK_DIS();
 80004de:	4b22      	ldr	r3, [pc, #136]	; (8000568 <PeriphClckControl+0x204>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a21      	ldr	r2, [pc, #132]	; (8000568 <PeriphClckControl+0x204>)
 80004e4:	f023 0320 	bic.w	r3, r3, #32
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ea:	e035      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOG)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a24      	ldr	r2, [pc, #144]	; (8000580 <PeriphClckControl+0x21c>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d106      	bne.n	8000502 <PeriphClckControl+0x19e>
			GPIOG_PERIPH_CLCK_DIS();
 80004f4:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <PeriphClckControl+0x204>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	4a1b      	ldr	r2, [pc, #108]	; (8000568 <PeriphClckControl+0x204>)
 80004fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000500:	e02a      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOH)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a1f      	ldr	r2, [pc, #124]	; (8000584 <PeriphClckControl+0x220>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d106      	bne.n	8000518 <PeriphClckControl+0x1b4>
			GPIOH_PERIPH_CLCK_DIS();
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <PeriphClckControl+0x204>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a16      	ldr	r2, [pc, #88]	; (8000568 <PeriphClckControl+0x204>)
 8000510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000516:	e01f      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOI)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a1b      	ldr	r2, [pc, #108]	; (8000588 <PeriphClckControl+0x224>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d106      	bne.n	800052e <PeriphClckControl+0x1ca>
			GPIOI_PERIPH_CLCK_DIS();
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <PeriphClckControl+0x204>)
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	4a10      	ldr	r2, [pc, #64]	; (8000568 <PeriphClckControl+0x204>)
 8000526:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800052a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052c:	e014      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOJ)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a16      	ldr	r2, [pc, #88]	; (800058c <PeriphClckControl+0x228>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d106      	bne.n	8000544 <PeriphClckControl+0x1e0>
			GPIOJ_PERIPH_CLCK_DIS();
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <PeriphClckControl+0x204>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <PeriphClckControl+0x204>)
 800053c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000542:	e009      	b.n	8000558 <PeriphClckControl+0x1f4>
		}else if (pGPIOx == GPIOK)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a12      	ldr	r2, [pc, #72]	; (8000590 <PeriphClckControl+0x22c>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d105      	bne.n	8000558 <PeriphClckControl+0x1f4>
			GPIOK_PERIPH_CLCK_DIS();
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <PeriphClckControl+0x204>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	4a05      	ldr	r2, [pc, #20]	; (8000568 <PeriphClckControl+0x204>)
 8000552:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000556:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40020000 	.word	0x40020000
 8000568:	40023800 	.word	0x40023800
 800056c:	40020400 	.word	0x40020400
 8000570:	40020800 	.word	0x40020800
 8000574:	40020c00 	.word	0x40020c00
 8000578:	40021000 	.word	0x40021000
 800057c:	40021400 	.word	0x40021400
 8000580:	40021800 	.word	0x40021800
 8000584:	40021c00 	.word	0x40021c00
 8000588:	40022000 	.word	0x40022000
 800058c:	40022400 	.word	0x40022400
 8000590:	40022800 	.word	0x40022800

08000594 <GPIO_Init>:
//Initialisation
void GPIO_Init(GPIO_Handle_t *pGpioHandle)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0 ;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
	//Enable Peripheral Clock
	PeriphClckControl(pGpioHandle->pGPIOx , ENABLE);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2101      	movs	r1, #1
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fedc 	bl	8000364 <PeriphClckControl>
	//Configure mode
	if(pGpioHandle->GPIO_PinConfig.PinMode<=GPIO_ANA)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	795b      	ldrb	r3, [r3, #5]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d820      	bhi.n	80005f6 <GPIO_Init+0x62>
	{
		temp = pGpioHandle->GPIO_PinConfig.PinMode<< 2*pGpioHandle->GPIO_PinConfig.PinNum;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	795b      	ldrb	r3, [r3, #5]
 80005b8:	461a      	mov	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	60fb      	str	r3, [r7, #12]
		pGpioHandle->pGPIOx->MODER &= ~(TWO_BITS<<2*pGpioHandle->GPIO_PinConfig.PinNum);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	2103      	movs	r1, #3
 80005d4:	fa01 f303 	lsl.w	r3, r1, r3
 80005d8:	43db      	mvns	r3, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	400a      	ands	r2, r1
 80005e2:	601a      	str	r2, [r3, #0]
		pGpioHandle->pGPIOx->MODER |= temp;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	6819      	ldr	r1, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	430a      	orrs	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	e0dd      	b.n	80007b2 <GPIO_Init+0x21e>


	}
	else
	{
		if(pGpioHandle->GPIO_PinConfig.PinMode == GPIO_IT_FALLING)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	795b      	ldrb	r3, [r3, #5]
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	d117      	bne.n	800062e <GPIO_Init+0x9a>
		{
			//Configure FTSR
			EXTI->FTSR |= (1<<pGpioHandle->GPIO_PinConfig.PinNum);
 80005fe:	4b52      	ldr	r3, [pc, #328]	; (8000748 <GPIO_Init+0x1b4>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	7912      	ldrb	r2, [r2, #4]
 8000606:	4611      	mov	r1, r2
 8000608:	2201      	movs	r2, #1
 800060a:	408a      	lsls	r2, r1
 800060c:	4611      	mov	r1, r2
 800060e:	4a4e      	ldr	r2, [pc, #312]	; (8000748 <GPIO_Init+0x1b4>)
 8000610:	430b      	orrs	r3, r1
 8000612:	60d3      	str	r3, [r2, #12]
			//Clear corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGpioHandle->GPIO_PinConfig.PinNum);
 8000614:	4b4c      	ldr	r3, [pc, #304]	; (8000748 <GPIO_Init+0x1b4>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	7912      	ldrb	r2, [r2, #4]
 800061c:	4611      	mov	r1, r2
 800061e:	2201      	movs	r2, #1
 8000620:	408a      	lsls	r2, r1
 8000622:	43d2      	mvns	r2, r2
 8000624:	4611      	mov	r1, r2
 8000626:	4a48      	ldr	r2, [pc, #288]	; (8000748 <GPIO_Init+0x1b4>)
 8000628:	400b      	ands	r3, r1
 800062a:	6093      	str	r3, [r2, #8]
 800062c:	e035      	b.n	800069a <GPIO_Init+0x106>


		}else if(pGpioHandle->GPIO_PinConfig.PinMode == GPIO_IT_RISING)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	795b      	ldrb	r3, [r3, #5]
 8000632:	2b05      	cmp	r3, #5
 8000634:	d117      	bne.n	8000666 <GPIO_Init+0xd2>
		{
			//Configure RTSR
			EXTI->RTSR |= (1<<pGpioHandle->GPIO_PinConfig.PinNum);
 8000636:	4b44      	ldr	r3, [pc, #272]	; (8000748 <GPIO_Init+0x1b4>)
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	7912      	ldrb	r2, [r2, #4]
 800063e:	4611      	mov	r1, r2
 8000640:	2201      	movs	r2, #1
 8000642:	408a      	lsls	r2, r1
 8000644:	4611      	mov	r1, r2
 8000646:	4a40      	ldr	r2, [pc, #256]	; (8000748 <GPIO_Init+0x1b4>)
 8000648:	430b      	orrs	r3, r1
 800064a:	6093      	str	r3, [r2, #8]
			//Clear corresponding RTSR bit
			EXTI->FTSR &= ~(1<<pGpioHandle->GPIO_PinConfig.PinNum);
 800064c:	4b3e      	ldr	r3, [pc, #248]	; (8000748 <GPIO_Init+0x1b4>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	7912      	ldrb	r2, [r2, #4]
 8000654:	4611      	mov	r1, r2
 8000656:	2201      	movs	r2, #1
 8000658:	408a      	lsls	r2, r1
 800065a:	43d2      	mvns	r2, r2
 800065c:	4611      	mov	r1, r2
 800065e:	4a3a      	ldr	r2, [pc, #232]	; (8000748 <GPIO_Init+0x1b4>)
 8000660:	400b      	ands	r3, r1
 8000662:	60d3      	str	r3, [r2, #12]
 8000664:	e019      	b.n	800069a <GPIO_Init+0x106>


		}else if(pGpioHandle->GPIO_PinConfig.PinMode == GPIO_IT_RISE_FALL)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	795b      	ldrb	r3, [r3, #5]
 800066a:	2b06      	cmp	r3, #6
 800066c:	d115      	bne.n	800069a <GPIO_Init+0x106>
		{
			//Configure both
			EXTI->FTSR |= (1<<pGpioHandle->GPIO_PinConfig.PinNum);
 800066e:	4b36      	ldr	r3, [pc, #216]	; (8000748 <GPIO_Init+0x1b4>)
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	7912      	ldrb	r2, [r2, #4]
 8000676:	4611      	mov	r1, r2
 8000678:	2201      	movs	r2, #1
 800067a:	408a      	lsls	r2, r1
 800067c:	4611      	mov	r1, r2
 800067e:	4a32      	ldr	r2, [pc, #200]	; (8000748 <GPIO_Init+0x1b4>)
 8000680:	430b      	orrs	r3, r1
 8000682:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<pGpioHandle->GPIO_PinConfig.PinNum);
 8000684:	4b30      	ldr	r3, [pc, #192]	; (8000748 <GPIO_Init+0x1b4>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	7912      	ldrb	r2, [r2, #4]
 800068c:	4611      	mov	r1, r2
 800068e:	2201      	movs	r2, #1
 8000690:	408a      	lsls	r2, r1
 8000692:	4611      	mov	r1, r2
 8000694:	4a2c      	ldr	r2, [pc, #176]	; (8000748 <GPIO_Init+0x1b4>)
 8000696:	430b      	orrs	r3, r1
 8000698:	6093      	str	r3, [r2, #8]
		}
		// 2. Configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGpioHandle->GPIO_PinConfig.PinNum / 4;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	791b      	ldrb	r3, [r3, #4]
 800069e:	089b      	lsrs	r3, r3, #2
 80006a0:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGpioHandle->GPIO_PinConfig.PinNum % 4;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	f003 0303 	and.w	r3, r3, #3
 80006aa:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASE_ADDR_TO_CODE(pGpioHandle->pGPIOx);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a26      	ldr	r2, [pc, #152]	; (800074c <GPIO_Init+0x1b8>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d060      	beq.n	8000778 <GPIO_Init+0x1e4>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a25      	ldr	r2, [pc, #148]	; (8000750 <GPIO_Init+0x1bc>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d040      	beq.n	8000742 <GPIO_Init+0x1ae>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a23      	ldr	r2, [pc, #140]	; (8000754 <GPIO_Init+0x1c0>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d039      	beq.n	800073e <GPIO_Init+0x1aa>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a22      	ldr	r2, [pc, #136]	; (8000758 <GPIO_Init+0x1c4>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d032      	beq.n	800073a <GPIO_Init+0x1a6>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a20      	ldr	r2, [pc, #128]	; (800075c <GPIO_Init+0x1c8>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d02b      	beq.n	8000736 <GPIO_Init+0x1a2>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a1f      	ldr	r2, [pc, #124]	; (8000760 <GPIO_Init+0x1cc>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d024      	beq.n	8000732 <GPIO_Init+0x19e>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a1d      	ldr	r2, [pc, #116]	; (8000764 <GPIO_Init+0x1d0>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d01d      	beq.n	800072e <GPIO_Init+0x19a>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <GPIO_Init+0x1d4>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d016      	beq.n	800072a <GPIO_Init+0x196>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a1a      	ldr	r2, [pc, #104]	; (800076c <GPIO_Init+0x1d8>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d00f      	beq.n	8000726 <GPIO_Init+0x192>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a19      	ldr	r2, [pc, #100]	; (8000770 <GPIO_Init+0x1dc>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d008      	beq.n	8000722 <GPIO_Init+0x18e>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a17      	ldr	r2, [pc, #92]	; (8000774 <GPIO_Init+0x1e0>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d101      	bne.n	800071e <GPIO_Init+0x18a>
 800071a:	230a      	movs	r3, #10
 800071c:	e02d      	b.n	800077a <GPIO_Init+0x1e6>
 800071e:	2300      	movs	r3, #0
 8000720:	e02b      	b.n	800077a <GPIO_Init+0x1e6>
 8000722:	2309      	movs	r3, #9
 8000724:	e029      	b.n	800077a <GPIO_Init+0x1e6>
 8000726:	2308      	movs	r3, #8
 8000728:	e027      	b.n	800077a <GPIO_Init+0x1e6>
 800072a:	2307      	movs	r3, #7
 800072c:	e025      	b.n	800077a <GPIO_Init+0x1e6>
 800072e:	2306      	movs	r3, #6
 8000730:	e023      	b.n	800077a <GPIO_Init+0x1e6>
 8000732:	2305      	movs	r3, #5
 8000734:	e021      	b.n	800077a <GPIO_Init+0x1e6>
 8000736:	2304      	movs	r3, #4
 8000738:	e01f      	b.n	800077a <GPIO_Init+0x1e6>
 800073a:	2303      	movs	r3, #3
 800073c:	e01d      	b.n	800077a <GPIO_Init+0x1e6>
 800073e:	2302      	movs	r3, #2
 8000740:	e01b      	b.n	800077a <GPIO_Init+0x1e6>
 8000742:	2301      	movs	r3, #1
 8000744:	e019      	b.n	800077a <GPIO_Init+0x1e6>
 8000746:	bf00      	nop
 8000748:	40013c00 	.word	0x40013c00
 800074c:	40020000 	.word	0x40020000
 8000750:	40020400 	.word	0x40020400
 8000754:	40020800 	.word	0x40020800
 8000758:	40020c00 	.word	0x40020c00
 800075c:	40021000 	.word	0x40021000
 8000760:	40021400 	.word	0x40021400
 8000764:	40021800 	.word	0x40021800
 8000768:	40021c00 	.word	0x40021c00
 800076c:	40022000 	.word	0x40022000
 8000770:	40022400 	.word	0x40022400
 8000774:	40022800 	.word	0x40022800
 8000778:	2300      	movs	r3, #0
 800077a:	727b      	strb	r3, [r7, #9]
		SYSCFG_PERI_CLCK_EN();
 800077c:	4b68      	ldr	r3, [pc, #416]	; (8000920 <GPIO_Init+0x38c>)
 800077e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000780:	4a67      	ldr	r2, [pc, #412]	; (8000920 <GPIO_Init+0x38c>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000786:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000788:	7a7a      	ldrb	r2, [r7, #9]
 800078a:	7abb      	ldrb	r3, [r7, #10]
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	fa02 f103 	lsl.w	r1, r2, r3
 8000792:	4a64      	ldr	r2, [pc, #400]	; (8000924 <GPIO_Init+0x390>)
 8000794:	7afb      	ldrb	r3, [r7, #11]
 8000796:	3302      	adds	r3, #2
 8000798:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 3. Enable EXTI interrupt delivery using IMR
		EXTI->IMR |= (1<<pGpioHandle->GPIO_PinConfig.PinNum);
 800079c:	4b62      	ldr	r3, [pc, #392]	; (8000928 <GPIO_Init+0x394>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	7912      	ldrb	r2, [r2, #4]
 80007a4:	4611      	mov	r1, r2
 80007a6:	2201      	movs	r2, #1
 80007a8:	408a      	lsls	r2, r1
 80007aa:	4611      	mov	r1, r2
 80007ac:	4a5e      	ldr	r2, [pc, #376]	; (8000928 <GPIO_Init+0x394>)
 80007ae:	430b      	orrs	r3, r1
 80007b0:	6013      	str	r3, [r2, #0]
		// To do later for IT
	}
	temp = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
	//speed
	temp = pGpioHandle->GPIO_PinConfig.PinSpeed << 2*pGpioHandle->GPIO_PinConfig.PinNum;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	799b      	ldrb	r3, [r3, #6]
 80007ba:	461a      	mov	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	60fb      	str	r3, [r7, #12]
	pGpioHandle->pGPIOx->OSPEEDR &= ~(TWO_BITS<<2*pGpioHandle->GPIO_PinConfig.PinNum);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	689a      	ldr	r2, [r3, #8]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	2103      	movs	r1, #3
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	43db      	mvns	r3, r3
 80007dc:	4619      	mov	r1, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	400a      	ands	r2, r1
 80007e4:	609a      	str	r2, [r3, #8]
	pGpioHandle->pGPIOx->OSPEEDR |= temp;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6899      	ldr	r1, [r3, #8]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	430a      	orrs	r2, r1
 80007f4:	609a      	str	r2, [r3, #8]
	//pupdr
	temp = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
	temp = pGpioHandle->GPIO_PinConfig.PinPupDr << 2*pGpioHandle->GPIO_PinConfig.PinNum;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	79db      	ldrb	r3, [r3, #7]
 80007fe:	461a      	mov	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	60fb      	str	r3, [r7, #12]
	pGpioHandle->pGPIOx->PUPDR &= ~(TWO_BITS<<2*pGpioHandle->GPIO_PinConfig.PinNum);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68da      	ldr	r2, [r3, #12]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	2103      	movs	r1, #3
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	4619      	mov	r1, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	400a      	ands	r2, r1
 8000828:	60da      	str	r2, [r3, #12]
	pGpioHandle->pGPIOx->PUPDR |= temp;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	68d9      	ldr	r1, [r3, #12]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	430a      	orrs	r2, r1
 8000838:	60da      	str	r2, [r3, #12]

	//optype
	temp = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
	temp = pGpioHandle->GPIO_PinConfig.PinOPType << pGpioHandle->GPIO_PinConfig.PinNum;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	7a1b      	ldrb	r3, [r3, #8]
 8000842:	461a      	mov	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	791b      	ldrb	r3, [r3, #4]
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	60fb      	str	r3, [r7, #12]
	pGpioHandle->pGPIOx->OTYPER &= ~(1<<pGpioHandle->GPIO_PinConfig.PinNum);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	791b      	ldrb	r3, [r3, #4]
 8000858:	4619      	mov	r1, r3
 800085a:	2301      	movs	r3, #1
 800085c:	408b      	lsls	r3, r1
 800085e:	43db      	mvns	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	400a      	ands	r2, r1
 8000868:	605a      	str	r2, [r3, #4]
	pGpioHandle->pGPIOx->OTYPER |= temp;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6859      	ldr	r1, [r3, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	430a      	orrs	r2, r1
 8000878:	605a      	str	r2, [r3, #4]
	temp = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
	//alt func
	if(pGpioHandle->GPIO_PinConfig.PinMode == GPIO_ALT)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	795b      	ldrb	r3, [r3, #5]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d148      	bne.n	8000918 <GPIO_Init+0x384>
	{
		if (pGpioHandle->GPIO_PinConfig.PinNum<8)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d820      	bhi.n	80008d0 <GPIO_Init+0x33c>
		{
			temp = pGpioHandle->GPIO_PinConfig.PinAltFunMode << 4*pGpioHandle->GPIO_PinConfig.PinNum;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	7a5b      	ldrb	r3, [r3, #9]
 8000892:	461a      	mov	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	791b      	ldrb	r3, [r3, #4]
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	60fb      	str	r3, [r7, #12]
			pGpioHandle->pGPIOx->AFRL &= ~(FOUR_BITS<<4*pGpioHandle->GPIO_PinConfig.PinNum);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	6a1a      	ldr	r2, [r3, #32]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	210f      	movs	r1, #15
 80008ae:	fa01 f303 	lsl.w	r3, r1, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	4619      	mov	r1, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	400a      	ands	r2, r1
 80008bc:	621a      	str	r2, [r3, #32]
			pGpioHandle->pGPIOx->AFRL |= temp;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6a19      	ldr	r1, [r3, #32]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	430a      	orrs	r2, r1
 80008cc:	621a      	str	r2, [r3, #32]


	}


}
 80008ce:	e023      	b.n	8000918 <GPIO_Init+0x384>
			temp = pGpioHandle->GPIO_PinConfig.PinAltFunMode << 4*(pGpioHandle->GPIO_PinConfig.PinNum%8);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	7a5b      	ldrb	r3, [r3, #9]
 80008d4:	461a      	mov	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	60fb      	str	r3, [r7, #12]
			pGpioHandle->pGPIOx->AFRH &= ~(FOUR_BITS<< 4*(pGpioHandle->GPIO_PinConfig.PinNum%8));
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	791b      	ldrb	r3, [r3, #4]
 80008f0:	f003 0307 	and.w	r3, r3, #7
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	210f      	movs	r1, #15
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	43db      	mvns	r3, r3
 80008fe:	4619      	mov	r1, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	400a      	ands	r2, r1
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
			pGpioHandle->pGPIOx->AFRH |= temp;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	430a      	orrs	r2, r1
 8000916:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40013800 	.word	0x40013800
 8000928:	40013c00 	.word	0x40013c00

0800092c <SPI_PeriphClckControl>:
static void spi_rxe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_error_interrupt_handle(SPI_Handle_t *pSPIHandle);

//Clock configuration
void SPI_PeriphClckControl(SPI_RegDef_t *SPIx , uint8_t Activation)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	70fb      	strb	r3, [r7, #3]
	if(Activation == ENABLE)
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d141      	bne.n	80009c2 <SPI_PeriphClckControl+0x96>
	{

		if(SPIx == SPI1)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a43      	ldr	r2, [pc, #268]	; (8000a50 <SPI_PeriphClckControl+0x124>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d106      	bne.n	8000954 <SPI_PeriphClckControl+0x28>
		{
			SPI1_PERI_CLCK_EN();
 8000946:	4b43      	ldr	r3, [pc, #268]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a42      	ldr	r2, [pc, #264]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 800094c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
			SPI6_PERI_CLCK_DIS();

		}

	}
}
 8000952:	e077      	b.n	8000a44 <SPI_PeriphClckControl+0x118>
		}else if (SPIx == SPI2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a40      	ldr	r2, [pc, #256]	; (8000a58 <SPI_PeriphClckControl+0x12c>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d106      	bne.n	800096a <SPI_PeriphClckControl+0x3e>
			SPI2_PERI_CLCK_EN();
 800095c:	4b3d      	ldr	r3, [pc, #244]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a3c      	ldr	r2, [pc, #240]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 8000962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000968:	e06c      	b.n	8000a44 <SPI_PeriphClckControl+0x118>
		}else if (SPIx == SPI3)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a3b      	ldr	r2, [pc, #236]	; (8000a5c <SPI_PeriphClckControl+0x130>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d106      	bne.n	8000980 <SPI_PeriphClckControl+0x54>
			SPI3_PERI_CLCK_EN();
 8000972:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a37      	ldr	r2, [pc, #220]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 8000978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800097e:	e061      	b.n	8000a44 <SPI_PeriphClckControl+0x118>
		}else if (SPIx == SPI4)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a37      	ldr	r2, [pc, #220]	; (8000a60 <SPI_PeriphClckControl+0x134>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d106      	bne.n	8000996 <SPI_PeriphClckControl+0x6a>
			SPI4_PERI_CLCK_EN();
 8000988:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 800098a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098c:	4a31      	ldr	r2, [pc, #196]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 800098e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000992:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000994:	e056      	b.n	8000a44 <SPI_PeriphClckControl+0x118>
		}else if (SPIx == SPI5)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a32      	ldr	r2, [pc, #200]	; (8000a64 <SPI_PeriphClckControl+0x138>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <SPI_PeriphClckControl+0x80>
			SPI5_PERI_CLCK_EN();
 800099e:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a2c      	ldr	r2, [pc, #176]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 80009a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009aa:	e04b      	b.n	8000a44 <SPI_PeriphClckControl+0x118>
		}else if (SPIx == SPI6)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a2e      	ldr	r2, [pc, #184]	; (8000a68 <SPI_PeriphClckControl+0x13c>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d147      	bne.n	8000a44 <SPI_PeriphClckControl+0x118>
			SPI6_PERI_CLCK_EN();
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 80009b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b8:	4a26      	ldr	r2, [pc, #152]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 80009ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009be:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009c0:	e040      	b.n	8000a44 <SPI_PeriphClckControl+0x118>
		if(SPIx == SPI1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <SPI_PeriphClckControl+0x124>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d106      	bne.n	80009d8 <SPI_PeriphClckControl+0xac>
			SPI1_PERI_CLCK_DIS();
 80009ca:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 80009d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009d6:	e035      	b.n	8000a44 <SPI_PeriphClckControl+0x118>
		}else if (SPIx == SPI2)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <SPI_PeriphClckControl+0x12c>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d106      	bne.n	80009ee <SPI_PeriphClckControl+0xc2>
			SPI2_PERI_CLCK_DIS();
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 80009e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009ec:	e02a      	b.n	8000a44 <SPI_PeriphClckControl+0x118>
		}else if (SPIx == SPI3)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a1a      	ldr	r2, [pc, #104]	; (8000a5c <SPI_PeriphClckControl+0x130>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d106      	bne.n	8000a04 <SPI_PeriphClckControl+0xd8>
			SPI3_PERI_CLCK_DIS();
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 80009fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a02:	e01f      	b.n	8000a44 <SPI_PeriphClckControl+0x118>
		}else if (SPIx == SPI4)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <SPI_PeriphClckControl+0x134>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d106      	bne.n	8000a1a <SPI_PeriphClckControl+0xee>
			SPI4_PERI_CLCK_DIS();
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 8000a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a10:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 8000a12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a16:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a18:	e014      	b.n	8000a44 <SPI_PeriphClckControl+0x118>
		}else if (SPIx == SPI5)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <SPI_PeriphClckControl+0x138>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d106      	bne.n	8000a30 <SPI_PeriphClckControl+0x104>
			SPI5_PERI_CLCK_DIS();
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 8000a28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a2e:	e009      	b.n	8000a44 <SPI_PeriphClckControl+0x118>
		}else if (SPIx == SPI6)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <SPI_PeriphClckControl+0x13c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d105      	bne.n	8000a44 <SPI_PeriphClckControl+0x118>
			SPI6_PERI_CLCK_DIS();
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 8000a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3c:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <SPI_PeriphClckControl+0x128>)
 8000a3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a42:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	40013000 	.word	0x40013000
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40003800 	.word	0x40003800
 8000a5c:	40003c00 	.word	0x40003c00
 8000a60:	40013400 	.word	0x40013400
 8000a64:	40015000 	.word	0x40015000
 8000a68:	40015400 	.word	0x40015400

08000a6c <SPI_Init>:
//Initialisation
void SPI_Init(SPI_Handle_t *pSpiHandle)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

	//First lets config SPI_CR1 register
	volatile uint32_t tempreg = 0 ;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
	//Cr2 register temp
	volatile uint32_t tempreg_cr2 = 0x00000700;
 8000a78:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a7c:	60bb      	str	r3, [r7, #8]

	SPI_PeriphClckControl(pSpiHandle->Spix , ENABLE);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2101      	movs	r1, #1
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff51 	bl	800092c <SPI_PeriphClckControl>
	//configure the device mode
	tempreg |= pSpiHandle->SPIConfig.SPI_Device_Mode << SPI_CR1_MASTR_MODE_BIT_POS;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	791b      	ldrb	r3, [r3, #4]
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	461a      	mov	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]

	//Configure Bus Config
	if(pSpiHandle->SPIConfig.SPI_Bus_Config == SPI_BUS_CONFIG_FULLDUP)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	795b      	ldrb	r3, [r3, #5]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d104      	bne.n	8000aaa <SPI_Init+0x3e>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE_BIT_POS);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	e014      	b.n	8000ad4 <SPI_Init+0x68>

	}else if(pSpiHandle->SPIConfig.SPI_Bus_Config == SPI_BUS_CONFIG_HALFDUP)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	795b      	ldrb	r3, [r3, #5]
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d104      	bne.n	8000abc <SPI_Init+0x50>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE_BIT_POS);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	e00b      	b.n	8000ad4 <SPI_Init+0x68>

	}else if(pSpiHandle->SPIConfig.SPI_Bus_Config == SPI_BUS_CONFIG_SIMPLEX_RX)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	795b      	ldrb	r3, [r3, #5]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d107      	bne.n	8000ad4 <SPI_Init+0x68>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE_BIT_POS);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000aca:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY_BIT_POS);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad2:	60fb      	str	r3, [r7, #12]

	}

	// 3.Configure SPI SCK speed (baud rate)
	tempreg |= ( pSpiHandle->SPIConfig.SPI_ClckSpeed << SPI_CR1_BR0);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	799b      	ldrb	r3, [r3, #6]
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]

	// 4. Configure the DS
	tempreg |= ( pSpiHandle->SPIConfig.SPI_DFF << SPI_CR2_DS0);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	79db      	ldrb	r3, [r3, #7]
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	461a      	mov	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]
	// 5. Configure CPOL
	tempreg |= ( pSpiHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL_BIT_POS);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7a1b      	ldrb	r3, [r3, #8]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	461a      	mov	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]

	// 6. Configure CPHA
	tempreg |= ( pSpiHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA_BIT_POS);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7a5b      	ldrb	r3, [r3, #9]
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
	//7. Software Slave management
	if(pSpiHandle->SPIConfig.SPI_SSM == SPI_SSM_EN)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	7a9b      	ldrb	r3, [r3, #10]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d10b      	bne.n	8000b2a <SPI_Init+0xbe>
	{
		//Set SSM bit and SSI bit
		tempreg |= (pSpiHandle->SPIConfig.SPI_SSM <<SPI_CR1_SSM_BIT_POS);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7a9b      	ldrb	r3, [r3, #10]
 8000b16:	025b      	lsls	r3, r3, #9
 8000b18:	461a      	mov	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 <<SPI_CR1_SSI);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	e00f      	b.n	8000b4a <SPI_Init+0xde>

	}else
	{
		//Clear SSI and SSM bits
		tempreg &= ~(1 <<SPI_CR1_SSM_BIT_POS);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b30:	60fb      	str	r3, [r7, #12]
		tempreg &= ~(1 <<SPI_CR1_SSI);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b38:	60fb      	str	r3, [r7, #12]
		if(pSpiHandle->SPIConfig.SPI_Device_Mode == SPI_DEVICE_MODE_MASTER )
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	791b      	ldrb	r3, [r3, #4]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d103      	bne.n	8000b4a <SPI_Init+0xde>
		{
			tempreg_cr2 |= 1<<SPI_CR2_SSOE;
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	60bb      	str	r3, [r7, #8]
		}
	}
	pSpiHandle->Spix->CR1 = tempreg ;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	601a      	str	r2, [r3, #0]
	//For 8bit data need to configure CR2 Register
	pSpiHandle->Spix->CR2 = tempreg_cr2;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	605a      	str	r2, [r3, #4]

}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <SPI_GetFlagStatus>:

	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689a      	ldr	r2, [r3, #8]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	4013      	ands	r3, r2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e000      	b.n	8000b7e <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <SPITransmit>:

/*
 *  SPI data Send and Receive
 */
void SPITransmit(SPI_RegDef_t *pSPIx, uint8_t *pTxBuff, uint32_t len)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b084      	sub	sp, #16
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
	if(len> 0)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d016      	beq.n	8000bca <SPITransmit+0x40>
	{
		while(len>0)
 8000b9c:	e012      	b.n	8000bc4 <SPITransmit+0x3a>
		{
			//1. wait untill TXE is set
			while(SPI_GetFlagStatus(pSPIx, SPI_TXNE_FLAG) == FLAG_RESET){}
 8000b9e:	bf00      	nop
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f7ff ffdd 	bl	8000b62 <SPI_GetFlagStatus>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0f8      	beq.n	8000ba0 <SPITransmit+0x16>
					(uint16_t*)pTxBuff++;

				}//else if(pSPIx->CR2 & ((SPI_8BIT_DATA<<SPI_CR2_DS0)))
				else if(SPI2Handle.SPIConfig.SPI_DFF == SPI_DFF_8BITS)
				{*/
			*(volatile uint8_t*)(&pSPIx->DR)= *pTxBuff;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	330c      	adds	r3, #12
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	7812      	ldrb	r2, [r2, #0]
 8000bb6:	701a      	strb	r2, [r3, #0]
			len--;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	607b      	str	r3, [r7, #4]
			pTxBuff++;
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
		while(len>0)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1e9      	bne.n	8000b9e <SPITransmit+0x14>



		}
	}
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <SPIPeripheralControl>:

	*( NVIC_PR_BASE_ADDRESS + iprx) |= (IRQPriority << shift_amount);

}
void SPIPeripheralControl(SPI_RegDef_t *SPIx,uint8_t Activation)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	70fb      	strb	r3, [r7, #3]
	if(Activation)
 8000bde:	78fb      	ldrb	r3, [r7, #3]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d006      	beq.n	8000bf2 <SPIPeripheralControl+0x20>
	{
		SPIx->CR1 |= (1 << SPI_CR1_SPE_BIT_POS);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	601a      	str	r2, [r3, #0]
	}else
	{
		SPIx->CR1 &= ~(1 << SPI_CR1_SPE_BIT_POS);
	}
}
 8000bf0:	e005      	b.n	8000bfe <SPIPeripheralControl+0x2c>
		SPIx->CR1 &= ~(1 << SPI_CR1_SPE_BIT_POS);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	601a      	str	r2, [r3, #0]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <__libc_init_array>:
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	4e0d      	ldr	r6, [pc, #52]	; (8000c44 <__libc_init_array+0x38>)
 8000c10:	4c0d      	ldr	r4, [pc, #52]	; (8000c48 <__libc_init_array+0x3c>)
 8000c12:	1ba4      	subs	r4, r4, r6
 8000c14:	10a4      	asrs	r4, r4, #2
 8000c16:	2500      	movs	r5, #0
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	d109      	bne.n	8000c30 <__libc_init_array+0x24>
 8000c1c:	4e0b      	ldr	r6, [pc, #44]	; (8000c4c <__libc_init_array+0x40>)
 8000c1e:	4c0c      	ldr	r4, [pc, #48]	; (8000c50 <__libc_init_array+0x44>)
 8000c20:	f000 f818 	bl	8000c54 <_init>
 8000c24:	1ba4      	subs	r4, r4, r6
 8000c26:	10a4      	asrs	r4, r4, #2
 8000c28:	2500      	movs	r5, #0
 8000c2a:	42a5      	cmp	r5, r4
 8000c2c:	d105      	bne.n	8000c3a <__libc_init_array+0x2e>
 8000c2e:	bd70      	pop	{r4, r5, r6, pc}
 8000c30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c34:	4798      	blx	r3
 8000c36:	3501      	adds	r5, #1
 8000c38:	e7ee      	b.n	8000c18 <__libc_init_array+0xc>
 8000c3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c3e:	4798      	blx	r3
 8000c40:	3501      	adds	r5, #1
 8000c42:	e7f2      	b.n	8000c2a <__libc_init_array+0x1e>
 8000c44:	08000c78 	.word	0x08000c78
 8000c48:	08000c78 	.word	0x08000c78
 8000c4c:	08000c78 	.word	0x08000c78
 8000c50:	08000c7c 	.word	0x08000c7c

08000c54 <_init>:
 8000c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c56:	bf00      	nop
 8000c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c5a:	bc08      	pop	{r3}
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	4770      	bx	lr

08000c60 <_fini>:
 8000c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c62:	bf00      	nop
 8000c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c66:	bc08      	pop	{r3}
 8000c68:	469e      	mov	lr, r3
 8000c6a:	4770      	bx	lr
